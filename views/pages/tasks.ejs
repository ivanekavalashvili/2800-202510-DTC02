<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <br><br><br>

    <!-- Dialog box -->
    <dialog id="dialogBox">
        <div id="dialogResult"></div>
    </dialog>
    
    <div id="result"></div>

    <% if (role == "parent" ) { %>
        <button onclick="dialogMaker(createCategoryPopup)" class="role-btn block mx-auto px-10">Create Category</button>

        <template id="categoryCreationTemplate">
            <div class="forms-container">
                <h1>Create a Category</h1>
                <label for="name">Name:</label>
                <input name="name" type="text" id="categoryName" class="input" placeholder="Category name..."
                    required>
                <label for="color">Background Color:</label>
                <input name="color" type="color" id="categoryColor" class="border-2" value="#b2e6b2" required>
                <div class="flex justify-between">
                    <button id="cancelButton" onclick="closeDialog()" class="role-btn">Cancel</button>
                    <button id="deleteButton" class="role-btn hidden">Delete</button>
                    <button id="submitButton" class="role-btn" type="submit">Submit</button>
                </div>
            </div>
        </template>

        <template id="taskCreationPopup">
            <div class="forms-container">
                <p class="text-xl">Create a Task</p>
                <label for="categoryName">Catergory Name: </label>
                <input name="catergoryName" type="text" id="categoryNameTask" class="input" readonly>
                <label for="name">Name of Task: </label>
                <input name="name" type="text" id="taskName" class="input"
                    placeholder="Input task name (EX. wash the dishes)" required>
                <label for="taskdetails">Task Details: </label>
                <input name="taskdetails" type="text" id="taskDetails" class="input"
                    placeholder="Describe the task and the intructions">
                <label for="points">Points awarded: </label>
                <input name="points" type="number" id="pointsAwarded" class="input" required>
                <label for="kids">Assigned to: </label>
                <div id="taskKids"></div>
                <div class="flex justify-between">
                    <button id="cancelButton" onclick="closeDialog()" class="role-btn" type="cancel">Cancel</button>
                    <button id="submitButton" class="role-btn" type="submit">Submit</button>
                </div>
            </div>
        </template>
        <script>
            const dialog = document.querySelector("dialog")
            const dialogResult = document.getElementById("dialogResult")


            function dialogMaker(makes, categoryName) {
                dialog.showModal()
                makes(categoryName)
            }

            function displayTaskForm(parentName) {
                dialogResult.innerHTML = ""
                tasktemplate = document.getElementById("taskCreationPopup")
                dialogResult.appendChild(tasktemplate.content.cloneNode(true))
                document.getElementById('categoryNameTask').value = parentName
                
                setTimeout(() => {
                const submitButton = document.getElementById("submitButton");
                if (submitButton) {submitButton.addEventListener("click", newTask)}
                const kidCheck = document.getElementById("taskKids")
                fetch("/kids", { method: "GET" })
                    .then((response) => response.json())
                    .then((data) => {
                        data.forEach((kid) => {
                            const name = document.createElement("label")
                            name.innerText = kid.username
                            kidCheck.appendChild(name)

                            const checkBtn = document.createElement("input")
                            checkBtn.setAttribute("type", "checkbox")
                            checkBtn.setAttribute("name", kid._id)
                            kidCheck.appendChild(checkBtn)
                        })
                    })
            }, 0)
        }

        // creates a category based on 
        function createCategoryPopup() {
            dialogResult.innerHTML = ""
            categoryTemplate = document.getElementById("categoryCreationTemplate")
            dialogResult.appendChild(categoryTemplate.content.cloneNode(true)) 

            setTimeout(() => {
                const submitButton = document.getElementById("submitButton");
                if (submitButton) submitButton.addEventListener("click", newCategory)
            }, 0)
        }

        function editCategoryPopup(category) {
            dialog.showModal()
            dialogResult.innerHTML = ""

            categoryTemplate = document.getElementById("categoryCreationTemplate")

            dialogResult.appendChild(categoryTemplate.content.cloneNode(true))

            setTimeout(() => {
                const categoryName = document.getElementById("categoryName")
                categoryName.setAttribute("value", category.name)

                const categoryColor = document.getElementById("categoryColor")
                categoryColor.setAttribute("value", category.color)

                const submitButton = document.getElementById("submitButton");
                if (submitButton) submitButton.addEventListener("click", (e) => editCategory(category, e))

                const deleteButton = document.getElementById("deleteButton");
                deleteButton.setAttribute("class", "role-btn")
                if (deleteButton) deleteButton.addEventListener('click', (e) => deleteCategory(category, e))
            }, 0)
        }

        function fetchCategories() {
            fetch("/categories", { method: "GET" })
                .then((response) => response.json())
                .then((data) => {
                    const result = document.getElementById("result")
                    result.innerHTML = ""
                    data.forEach((category) => {
                        const div = document.createElement("div")
                        div.setAttribute('class', "grid bg-[" + category.color + "] rounded-md my-5 p-2 mx-5")
                        result.appendChild(div)

                        const titleAndEdit = document.createElement("div")
                        titleAndEdit.setAttribute("class", "flex justify-between items-center mb-3")
                        div.appendChild(titleAndEdit)

                        const title = document.createElement("span")
                        title.innerText = category.name
                        title.setAttribute("class", "text-2xl font-bold bg-white bg-opacity-70 p-3 mb-2 rounded")

                        titleAndEdit.appendChild(title)

                        const editBtn = document.createElement("button")
                        editBtn.innerHTML = "Edit category"
                        editBtn.setAttribute("class", "role-btn ml-10 px-3 bg-opacity-70")
                        editBtn.addEventListener("click", () => editCategoryPopup(category))
                        titleAndEdit.appendChild(editBtn)

                        const totalResult = document.createElement("div")
                        totalResult.setAttribute('class', "grid grid-cols-2 gap-3 mb-3")
                        div.appendChild(totalResult)

                        // Fuctionality for filling out the tasks inside the category
                            // Encode the url just incase it has spaces (Other wise it will think you sent 2 different parameters)
                            const categoryNameDB = encodeURIComponent(category.name)
                            fetch(`/displayTasks?category=${categoryNameDB}`, {
                                credentials: 'include',
                                method: "GET",
                                })
                                .then((response) => response.json())
                                .then((data) => {
                                    data.forEach((task) => {

                                        const taskResult = document.createElement("div")
                                        taskResult.setAttribute('class', "bg-white bg-opacity-70 rounded-md p-2")
                                        totalResult.appendChild(taskResult)
                                        
                                        const topDiv = document.createElement("div")
                                        topDiv.setAttribute('class', "grid grid-cols-2 rounded-md mb-2")
                                        taskResult.appendChild(topDiv)

                                        const taskTitle = document.createElement('span')
                                        taskTitle.setAttribute('class', "rounded-md my-2 font-bold font-lg")
                                        taskTitle.innerHTML = task.name
                                        topDiv.appendChild(taskTitle)

                                        const taskPoints = document.createElement('span')
                                        taskPoints.setAttribute('class', "rounded-md my-2 text-right")
                                        taskPoints.innerHTML = '$' + task.points
                                        topDiv.appendChild(taskPoints)

                                        const taskDesc = document.createElement('p')
                                        taskDesc.setAttribute('class', "rounded-md my-2")
                                        taskDesc.innerHTML = task.taskdetails
                                        taskResult.appendChild(taskDesc)
                                    })
                                })
                        
                        const btn = document.createElement('button')
                        btn.addEventListener("click", () => dialogMaker(displayTaskForm, category.name))
                        btn.setAttribute("class", "role-btn")
                        btn.innerText = "Add Task"
                        div.appendChild(btn)
                    })
                })
        }

        function newTask() {
            const name = document.getElementById('taskName').value
            const taskdetails = document.getElementById('taskDetails').value
            const points = document.getElementById('pointsAwarded').value
            const catergoryName = document.getElementById('categoryNameTask').value
            kids = []
            const kidCheckboxes = document.querySelectorAll('#taskKids input[type="checkbox"]')
            kidCheckboxes.forEach((checkbox) => {
                if (checkbox.checked) {
                    kids.push(checkbox.name)
                }
            })

            fetch("/createTask", {
                method: "POST" ,
                headers: {"Content-Type": "application/json"}, 
                body: JSON.stringify({ catergoryName, name, taskdetails, points, kids })
            })
            .then(res => res.json())
            .then(data => {
                fetchCategories();
                closeDialog()
            })
            .catch(err => {
                console.error("Error creating task:", err)
            })
        }

        function newCategory(e) {
            e.preventDefault();
            const name = document.getElementById('categoryName').value
            const color = document.getElementById('categoryColor').value

            fetch("/createCategory", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ name, color })
            })
                .then(res => res.json())
                .then(data => {
                    console.log(data.message);
                    fetchCategories();
                    closeDialog();
                })
                .catch(err => {
                    console.error("Error creating category:", err)
                })
        }

        function editCategory(category, e) {
            e.preventDefault();
            const newName = document.getElementById('categoryName').value
            const newColor = document.getElementById('categoryColor').value
            const oldName = category.name
            const id = category._id

            fetch("/editCategory", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ _id: id, name: newName, color: newColor, oldName: oldName })
            })
                .then(res => res.json())
                .then(data => {
                    console.log(data.message);
                    fetchCategories();
                    closeDialog();
                })
        }

        function deleteCategory(category, e) {
            e.preventDefault();
            fetch("/deleteCategory", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ _id: category._id })
            })
                .then(res => res.json())
                .then(data => {
                    console.log(data.message);
                    fetchCategories();
                    closeDialog();
                })
        }

        function closeDialog() {
            dialog.close();
        }

        fetchCategories()
    </script>
    <% } %>

    <% if (role=="kid" ) { %>
        <script>
            function fetchCategories() {
                fetch("/kidCategories", { method: "GET" })
                    .then((response) => response.json())
                    .then((data) => {
                        const result = document.getElementById("result")
                        result.innerHTML = ""
                        data.forEach((category) => {
                            const div = document.createElement("div")
                            div.setAttribute('class', "grid grid-rows-2 bg-[" + category.color + "] rounded-md my-2 p-2")
                            result.appendChild(div)

                            const titleAndEdit = document.createElement("div")
                            titleAndEdit.setAttribute("class", "flex justify-between items-center")
                            div.appendChild(titleAndEdit)

                            const title = document.createElement("span")
                            title.innerText = category.name
                            title.setAttribute("class", "text-2xl font-bold bg-white p-3 mb-2 rounded-md")

                            titleAndEdit.appendChild(title)

                            const totalResult = document.createElement("div")
                            totalResult.setAttribute('class', "grid grid-cols-2 gap-3 mb-3")
                            div.appendChild(totalResult)

                            // Fuctionality for filling out the tasks inside the category
                            // Encode the url just incase it has spaces (Other wise it will think you sent 2 different parameters)
                            const categoryNameDB = encodeURIComponent(category.name)
                            fetch(`/kidDisplayTasks?category=${categoryNameDB}`, {
                                credentials: 'include',
                                method: "GET",
                            })
                                .then((response) => response.json())
                                .then((data) => {
                                    data.forEach((task) => {
                                        const taskResult = document.createElement("div")
                                        taskResult.setAttribute('class', "bg-white rounded-md p-2")
                                        totalResult.appendChild(taskResult)

                                        const topDiv = document.createElement("div")
                                        topDiv.setAttribute('class', "grid grid-cols-2 rounded-md my-2")
                                        taskResult.appendChild(topDiv)

                                        const taskTitle = document.createElement('span')
                                        taskTitle.setAttribute('class', "rounded-md my-2")
                                        taskTitle.innerHTML = task.name
                                        topDiv.appendChild(taskTitle)

                                        const taskPoints = document.createElement('span')
                                        taskPoints.setAttribute('class', "rounded-md my-2")
                                        taskPoints.innerHTML = 'Points: ' + task.points
                                        topDiv.appendChild(taskPoints)

                                        const taskDesc = document.createElement('p')
                                        taskDesc.setAttribute('class', "rounded-md my-2")
                                        taskDesc.innerHTML = task.taskdetails
                                        taskResult.appendChild(taskDesc)
                                    })
                                })
                        })
                    })
                }
                fetchCategories()
        </script>
    <% } %>

    <% if (role==undefined ) { %>
        <p>Please log in</p>
    <% } %>

    <div id="weatherDiv"
        style="background: #f4ffe4; padding: 16px 20px; border-radius: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); font-family: Open Sans, sans-serif; z-index: 1000; width: 200px;"
        class="fixed max-md:relative md:top-40 md:right-10 max-md:mx-auto my-10">
        <h4 style="margin-bottom: 8px; font: 600 1rem 'Open Sans', sans-serif; color: #2e8b3d;">Current Weather</h4>
        <p id="weather-temp" style="margin: 6px 0 2px 0; font-size: 1rem;"></p>
        <p id="weather-desc" style="margin: 0 0 8px 0; font-size: 0.9rem; color: #444;"></p>
        <img id="weather-icon" src="" alt="Weather Icon" style="width: 50px; display: none;">
    </div>

    <script>
    let latitude;
    let longitude;

    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(success, error);
        } else {
            console.log("Geolocation is not supported by this browser.");
        }
    }

    function success(position) {
        latitude = position.coords.latitude
        longitude = position.coords.longitude
        console.log(longitude, latitude)
        getWeather(latitude, longitude);
    }

    function error() {
        alert("Sorry, no position available.");
    }

    function getWeather(latitude, longitude) {
        const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=55aacf4680def095e9090e51cee74084`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const temp = data.main.temp;
                const description = data.weather[0].description;
                const image = data.weather[0].icon;
                weatherDiv.innerHTML =
                    ` <p>${temp}°C</p>
                    <p>${description}</p>
                    <img src="http://openweathermap.org/img/w/${image}.png" alt="Weather Icon" />
                    `;

                console.log(` Temperature: ${temp}°C`);
                console.log(` Description: ${description}`);
                console.log(`Icon URL: http://openweathermap.org/img/wn/${image}@2x.png`);
            })
            .catch(error => {
                console.error("Error fetching weather:", error);
            });
    }


    window.onload = getLocation;
</script>


</body>

</html>