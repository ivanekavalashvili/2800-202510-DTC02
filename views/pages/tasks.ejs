<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <div class="mb-10 max-md:mb-24 md:mt-24">
        <!-- Dialog box -->
        <dialog id="dialogBox">
            <div id="dialogResult"></div>
        </dialog>

        <div id="result"></div>

        <!-- All of the parent rendering and logic -->
        <% if (role=="parent" ) { %>
            <button onclick="dialogMaker(createCategoryPopup)" class="role-btn block mx-auto px-10">Create
                Category
            </button>

            <!-- The template for both Category creation and Category editing -->
            <template id="categoryCreationTemplate">
                <div class="modal flex">
                    <div class="modal-content p-5">
                        <h2 class="text-xl" id="Create a Category">Create a Category</h2>
                        <p>Name:</p>
                        <input name="name" type="text" id="categoryName" class="input" placeholder="Category name..."
                            required>
                        <p for="color">Background Color:</p>
                        <input name="color" type="color" id="categoryColor" class="block border-2 mx-auto w-20"
                            value="#b2e6b2" required>
                        <br>
                        <div class="flex justify-between gap-2">
                            <button id="cancelButton" onclick="closeDialog()" class="role-btn">Cancel</button>
                            <button id="deleteButton" class="role-btn hidden">Delete</button>
                            <button id="submitButton" class="role-btn" type="submit">Submit</button>
                        </div>
                    </div>
                </div>
            </template>

            <!-- The template for both Task creation and Task editing -->
            <template id="taskCreationPopup">
                <div class="modal flex">
                    <div class="modal-content p-5 max-h-screen overflow-y-auto">
                        <p class="text-xl">Create a Task</p>
                        <label for="categoryName">Catergory Name: </label>
                        <input name="categoryName" type="text" id="categoryNameTask" class="input" readonly>
                        <label for="name">Name of Task: </label>
                        <input name="name" type="text" id="taskName" class="input"
                            placeholder="Input task name (EX. wash the dishes)" required>
                        <input type="text" id="taskImageUrl" name="taskImageUrl" hidden>

                        <div class="mb-3">
                            <div class="flex items-center">
                                <div id="taskImagePreview"
                                    class="w-24 h-24 border-2 border-gray-300 rounded-md mr-3 flex items-center justify-center bg-gray-100">
                                    <span class="text-gray-400 text-sm text-center">Image<br>Preview</span>
                                </div>
                                <button type="button" id="generateImageButton" class="role-btn">Generate</button>
                            </div>
                        </div>

                        <label for="taskdetails">Task Details: </label>
                        <input name="taskdetails" type="text" id="taskDetails" class="input"
                            placeholder="Describe the task and the intructions">

                        <label for="points">Points awarded: </label>
                        <input name="points" type="number" id="pointsAwarded" class="input"
                            placeholder="Input the number of points to be awarded" required>

                        <div class="mb-4">
                            <div class="flex items-center justify-center mb-2">
                                <input type="checkbox" id="isRepeating" class="mr-2">
                                <label for="isRepeating">Make this a repeating task</label>
                            </div>
                            <div id="repeatIntervalContainer" class="hidden">
                                <select id="repeatInterval" class="input">
                                    <option value="daily">Daily</option>
                                    <option value="weekly">Weekly</option>
                                    <option value="monthly">Monthly</option>
                                </select>
                            </div>
                        </div>

                        <label for="kids">Assigned to: </label>
                        <div id="taskKids"></div>
                        <div class="flex justify-between gap-2">
                            <button id="cancelButton" onclick="closeDialog()" class="role-btn"
                                type="cancel">Cancel</button>
                            <button id="deleteButtonTask" class="role-btn hidden">Delete</button>
                            <button id="submitButton" class="role-btn" type="submit">Submit</button>
                        </div>
                    </div>
                </div>
            </template>


            <script>
                const dialog = document.querySelector("dialog")
                const dialogResult = document.getElementById("dialogResult")

                // Makes the dialog visible and edits it with whatever other function you put into makes
                function dialogMaker(makes, categoryName) {
                    dialog.showModal()
                    makes(categoryName)
                }

                // Creates the popup for creating Tasks
                function displayTaskForm(parentName) {
                    dialogResult.innerHTML = ""
                    tasktemplate = document.getElementById("taskCreationPopup")
                    dialogResult.appendChild(tasktemplate.content.cloneNode(true))
                    document.getElementById('categoryNameTask').value = parentName

                    setTimeout(() => {
                        setupRepeatingTaskUI();
                        const submitButton = document.getElementById("submitButton");
                        if (submitButton) { submitButton.addEventListener("click", newTask) }

                        // event listener for generate image button
                        const generateImageBtn = document.getElementById("generateImageButton");
                        if (generateImageBtn) {
                            generateImageBtn.addEventListener("click", async () => {
                                const taskName = document.getElementById('taskName').value;
                                const taskDetails = document.getElementById('taskDetails').value;

                                if (!taskName || taskName.trim() === "") {
                                    alert("Please enter a task name before generating an image");
                                    return;
                                }

                                // This prompt ensures that the logos generated are coherant and suit the themes of the app
                                let prompt = `Create a simple, vector logo icon thing for a task called "${taskName}"`;
                                prompt += `. Make it colorful and simple, for a family task management app. `
                                prompt += `Style: flat vector illustration. Stick to a white background. Focus on one object from the task. `;
                                prompt += `VERY VERY OMEGA IMPORTANT: Create a LARGE icon that FILLS THE ENTIRE FRAME. The icon should be prominent and centered, taking up most of the available space. Create ONLY an illustration with NO TEXT whatsoever. Do not include any words, letters, numbers, labels, or text of any kind. The image must be 100% text-free.`;
                                console.log("prompt:", prompt);

                                const previewElement = document.getElementById('taskImagePreview');
                                previewElement.innerHTML = '<span class="text-gray-400">Loading...</span>';

                                fetch('/generate-image', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({ prompt: prompt })
                                })
                                .then(response => {
                                    if (!response.ok) {
                                        throw new Error('Network response was not ok');
                                    }
                                    return response.json();
                                })
                                .then(data => {
                                    if (data.imageUrl) {
                                        previewElement.innerHTML = `<img src="${data.imageUrl}" alt="Task icon" class="w-full h-full object-contain">`;

                                        let imageUrlInput = document.getElementById('taskImageUrl');
                                        imageUrlInput.value = data.imageUrl;
                                    } else {
                                        previewElement.innerHTML = '<span class="text-red-500">Failed to generate image</span>';
                                    }
                                })
                                .catch(error => {
                                    console.error('Error generating image:', error);
                                    previewElement.innerHTML = '<span class="text-red-500">Error</span>';
                                });
                            });
                        }

                        // This creates the checkboxes for which kids the parent wants to assign to the task
                        const kidCheck = document.getElementById("taskKids")
                        fetch("/kids", { method: "GET" })
                        .then((response) => response.json())
                        .then((data) => {
                            data.forEach((kid) => {

                                const checkBtn = document.createElement("input")
                                checkBtn.setAttribute("type", "checkbox")
                                checkBtn.setAttribute("class", "m-3")
                                checkBtn.setAttribute("name", kid._id)
                                checkBtn.checked = true
                                kidCheck.appendChild(checkBtn)

                                const name = document.createElement("label")
                                name.innerText = kid.username
                                kidCheck.appendChild(name)

                                br = document.createElement("br")
                                kidCheck.appendChild(br)
                            })
                        })
                    }, 0)
                }

                // Creates the popup for creating Categories
                function createCategoryPopup() {
                    dialogResult.innerHTML = ""
                    categoryTemplate = document.getElementById("categoryCreationTemplate")
                    dialogResult.appendChild(categoryTemplate.content.cloneNode(true))

                    setTimeout(() => {
                        formType = document.getElementById("Create a Category")
                        formType.innerText = "Create a Category"

                        const submitButton = document.getElementById("submitButton");
                        if (submitButton) submitButton.addEventListener("click", newCategory)
                    }, 0)
                }

                // Creates the popup for creating Categories
                function editCategoryPopup(category) {
                    dialog.showModal()
                    dialogResult.innerHTML = ""

                    categoryTemplate = document.getElementById("categoryCreationTemplate")
                    dialogResult.appendChild(categoryTemplate.content.cloneNode(true))

                    setTimeout(() => {
                        formType = document.getElementById("Create a Category")
                        formType.innerText = "Edit Category"

                        const categoryName = document.getElementById("categoryName")
                        categoryName.setAttribute("value", category.name)

                        const categoryColor = document.getElementById("categoryColor")
                        categoryColor.setAttribute("value", category.color)

                        const submitButton = document.getElementById("submitButton");
                        if (submitButton) submitButton.addEventListener("click", (e) => editCategory(category, e))

                        const deleteButton = document.getElementById("deleteButton");
                        deleteButton.setAttribute("class", "role-btn")
                        if (deleteButton) deleteButton.addEventListener('click', (e) => deleteCategory(category, e))
                    }, 0)
                }

                // Creating the option to edit your tasks through the original pop for the task creation
                function editTaskPopup(task) {
                    dialog.showModal()
                    dialogResult.innerHTML = ""

                    taskTemplate = document.getElementById("taskCreationPopup")
                    dialogResult.appendChild(taskTemplate.content.cloneNode(true))

                    setTimeout(() => {
                        const categoryNameTask = document.getElementById("categoryNameTask")
                        categoryNameTask.setAttribute("value", task.catergoryName)

                        const taskName = document.getElementById("taskName")
                        taskName.setAttribute("value", task.name)

                        const taskDetails = document.getElementById("taskDetails")
                        taskDetails.setAttribute("value", task.taskdetails)

                        const taskPoints = document.getElementById("pointsAwarded")
                        taskPoints.setAttribute("value", task.points)

                        // Set up repeating task UI
                        setupRepeatingTaskUI();
                        const isRepeatingCheckbox = document.getElementById("isRepeating");
                        const repeatIntervalSelect = document.getElementById("repeatInterval");
                        const repeatIntervalContainer = document.getElementById("repeatIntervalContainer");


                        if (task.isRepeating) {
                            isRepeatingCheckbox.checked = true;
                            repeatIntervalContainer.classList.remove('hidden');
                            repeatIntervalSelect.value = task.repeatInterval;
                        }

                        const previewElement = document.getElementById('taskImagePreview');
                        if (task.filename) {
                            previewElement.innerHTML = `<img src="images/${task.filename}" alt="Task icon" class="w-full h-full object-contain">`;
                        }

                        const generateImageBtn = document.getElementById("generateImageButton");
                        if (generateImageBtn) {
                            generateImageBtn.addEventListener("click", async () => {
                                const taskName = document.getElementById('taskName').value;
                                const taskDetails = document.getElementById('taskDetails').value;

                                if (!taskName || taskName.trim() === "") {
                                    alert("Please enter a task name before generating an image");
                                    return;
                                }

                                let prompt = `Create a simple, vector logo icon thing for a task called "${taskName}"`;
                                prompt += `. Make it colorful and simple, for a family task management app. `
                                prompt += `Style: flat vector illustration. Stick to a white background. Focus on one object from the task. `;
                                prompt += `VERY VERY OMEGA IMPORTANT: Create a LARGE icon that FILLS THE ENTIRE FRAME. The icon should be prominent and centered, taking up most of the available space. Create ONLY an illustration with NO TEXT whatsoever. Do not include any words, letters, numbers, labels, or text of any kind. The image must be 100% text-free.`;
                                console.log("prompt:", prompt);

                                previewElement.innerHTML = '<span class="text-gray-400">Loading...</span>';

                                fetch('/generate-image', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({ prompt: prompt })
                                })
                                .then(response => {
                                    if (!response.ok) {
                                        throw new Error('Network response was not ok');
                                    }
                                    return response.json();
                                })
                                .then(data => {
                                    if (data.imageUrl) {
                                        previewElement.innerHTML = `<img src="${data.imageUrl}" alt="Task icon" class="w-full h-full object-contain">`;

                                        let imageUrlInput = document.getElementById('taskImageUrl');
                                        imageUrlInput.value = data.imageUrl;
                                    } else {
                                        previewElement.innerHTML = '<span class="text-red-500">Failed to generate image</span>';
                                    }
                                })
                                .catch(error => {
                                    console.error('Error generating image:', error);
                                    previewElement.innerHTML = '<span class="text-red-500">Error</span>';
                                });
                            });
                        }

                        const submitButton = document.getElementById("submitButton");
                        if (submitButton) submitButton.addEventListener("click", (e) => editTask(task, e))

                        const deleteButton = document.getElementById("deleteButtonTask");
                        deleteButton.setAttribute("class", "role-btn")
                        if (deleteButton) deleteButton.addEventListener('click', (e) => deleteTask(task, e))
                    }, 0)
                }

                // Displays the categories created by the parent and then the tasks created by the parent too
                function fetchCategories() {
                    fetch("/categories", { method: "GET" })
                    .then((response) => response.json())
                    .then((data) => {
                        const result = document.getElementById("result")
                        result.innerHTML = ""
                        data.forEach((category) => {
                            const div = document.createElement("div")
                            div.setAttribute('class', "grid bg-[" + category.color + "] rounded-2xl my-5 p-2 mx-5 max-w-4xl")
                            result.appendChild(div)

                            const titleAndEdit = document.createElement("div")
                            titleAndEdit.setAttribute("class", "flex justify-between items-center mb-3")
                            div.appendChild(titleAndEdit)

                            const title = document.createElement("span")
                            title.innerText = category.name
                            title.setAttribute("class", "text-2xl shadow text-center font-bold bg-white bg-opacity-70 p-3 mb-2 rounded-2xl")
                            titleAndEdit.appendChild(title)

                            const editBtn = document.createElement("button")
                            editBtn.innerHTML = "Edit category"
                            editBtn.setAttribute("class", "role-btn ml-5 mr-3 px-3 shadow bg-opacity-70")
                            editBtn.addEventListener("click", () => editCategoryPopup(category))
                            titleAndEdit.appendChild(editBtn)

                            const totalResult = document.createElement("div")
                            totalResult.setAttribute('class', "grid grid-cols-2 gap-3 mb-3")
                            div.appendChild(totalResult)

                            // Fuctionality for filling out the tasks inside the category
                            // Encode the url just incase it has spaces (Other wise it will think you sent 2 different parameters)
                            const categoryNameDB = encodeURIComponent(category.name)
                            fetch(`/displayTasks?category=${categoryNameDB}`, {
                                credentials: 'include',
                                method: "GET",
                            })
                            .then((response) => response.json())
                            .then((data) => {
                                data.forEach((task) => {

                                    const taskResult = document.createElement("div")
                                    taskResult.setAttribute('class', "bg-white bg-opacity-70 shadow rounded-2xl p-2")
                                    totalResult.appendChild(taskResult)

                                    const topDiv = document.createElement("div")
                                    topDiv.setAttribute('class', "grid grid-cols-2 md:grid-cols-3 rounded-2xl mb-2")
                                    taskResult.appendChild(topDiv)

                                    const taskTitle = document.createElement('span')
                                    taskTitle.setAttribute('class', " flex rounded-2xl font-bold font-lg")
                                    taskTitle.innerHTML = task.name
                                    topDiv.appendChild(taskTitle)

                                    if (task.filename) {
                                        console.log(task.filename)
                                        const logo = document.createElement('img')
                                        logo.setAttribute('class', "flex rounded-full shadow size-20 mx-auto font-bold font-lg")
                                        logo.src = "images/" + task.filename
                                        topDiv.appendChild(logo)
                                    } else {
                                        const placeholder = document.createElement('div')
                                        placeholder.setAttribute('class', "w-20 h-20 bg-gray-200 rounded-full flex mx-auto items-center justify-center font-bold text-2xl")
                                        placeholder.innerHTML = '<span class="text-gray-400 text-xs">No icon</span>'
                                        topDiv.appendChild(placeholder)
                                    }

                                    const taskPoints = document.createElement('span')
                                    taskPoints.setAttribute('class', "rounded-2xl md:text-right")
                                    taskPoints.innerHTML = '⭐' + task.points
                                    topDiv.appendChild(taskPoints)

                                    const taskDesc = document.createElement('p')
                                    taskDesc.setAttribute('class', "rounded-2xl")
                                    taskDesc.innerHTML = task.taskdetails
                                    taskResult.appendChild(taskDesc)

                                    const editTaskBtn = document.createElement("button")
                                    editTaskBtn.innerHTML = "Edit Task"
                                    editTaskBtn.setAttribute("class", "role-btn block shadow mx-auto mt-3 px-10")
                                    editTaskBtn.addEventListener("click", () => editTaskPopup(task))
                                    taskResult.appendChild(editTaskBtn)
                                })
                            })

                            const btn = document.createElement('button')
                            btn.addEventListener("click", () => dialogMaker(displayTaskForm, category.name))
                            btn.setAttribute("class", "role-btn  shadow")
                            btn.innerText = "Add Task"
                            div.appendChild(btn)
                        })
                    })
                }

                // Takes the information from the task popup and saves it to the backend
                function newTask() {
                    const name = document.getElementById('taskName').value
                    const logoUrl = document.getElementById('taskImageUrl').value
                    const taskdetails = document.getElementById('taskDetails').value
                    const points = document.getElementById('pointsAwarded').value
                    const catergoryName = document.getElementById('categoryNameTask').value
                    const isRepeating = document.getElementById('isRepeating').checked
                    const repeatInterval = isRepeating ? document.getElementById('repeatInterval').value : null
                    kids = []
                    const kidCheckboxes = document.querySelectorAll('#taskKids input[type="checkbox"]')
                    kidCheckboxes.forEach((checkbox) => {
                        if (checkbox.checked) {
                            kids.push(checkbox.name)
                        }
                    })

                    fetch("/createTask", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            catergoryName,
                            name,
                            logoUrl,
                            taskdetails,
                            points,
                            kids,
                            isRepeating,
                            repeatInterval
                        })
                    })
                    .then(res => res.json())
                    .then(data => {
                        fetchCategories();
                        closeDialog()
                    })
                    .catch(err => {
                        console.error("Error creating task:", err)
                    })
                }

                // Add event listener for repeating task checkbox
                function setupRepeatingTaskUI() {
                    const isRepeatingCheckbox = document.getElementById('isRepeating');
                    const repeatIntervalContainer = document.getElementById('repeatIntervalContainer');

                    if (isRepeatingCheckbox) {
                        isRepeatingCheckbox.addEventListener('change', (e) => {
                            repeatIntervalContainer.classList.toggle('hidden', !e.target.checked);
                        });
                    }
                }

                // Takes the information from the category popup and saves it to the backend
                function newCategory(e) {
                    e.preventDefault();
                    const name = document.getElementById('categoryName').value
                    const color = document.getElementById('categoryColor').value

                    fetch("/createCategory", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ name, color })
                    })
                    .then(res => res.json())
                    .then(data => {
                        console.log(data.message);
                        fetchCategories();
                        closeDialog();
                    })
                    .catch(err => {
                        console.error("Error creating category:", err)
                    })
                }

                // Edits the task in the backend with whatever was changed in the task edit form
                function editTask(task, e) {
                    e.preventDefault();
                    const name = document.getElementById('taskName').value
                    const logoUrl = document.getElementById('taskImageUrl').value
                    const taskdetails = document.getElementById('taskDetails').value
                    const points = document.getElementById('pointsAwarded').value
                    const isRepeating = document.getElementById('isRepeating').checked
                    const repeatInterval = isRepeating ? document.getElementById('repeatInterval').value : null
                    const id = task._id

                    fetch("/editTask", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            _id: id,
                            logoUrl: logoUrl,
                            name: name,
                            taskDetails: taskdetails,
                            points: points,
                            isRepeating: isRepeating,
                            repeatInterval: repeatInterval
                        })
                    })
                    .then(res => res.json())
                    .then(data => {
                        console.log(data.message);
                        fetchCategories();
                        closeDialog();
                    })
                }

                // Edits the category in the backend with whatever was changed in the category edit form
                function editCategory(category, e) {
                    e.preventDefault();
                    const newName = document.getElementById('categoryName').value
                    const newColor = document.getElementById('categoryColor').value
                    const oldName = category.name
                    const id = category._id

                    fetch("/editCategory", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ _id: id, name: newName, color: newColor, oldName: oldName })
                    })
                    .then(res => res.json())
                    .then(data => {
                        console.log(data.message);
                        fetchCategories();
                        closeDialog();
                    })
                }

                // deletes task from the backend
                function deleteTask(task, e) {
                    e.preventDefault();
                    fetch("/deleteTask", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ _id: task._id })
                    })
                    .then(res => res.json())
                    .then(data => {
                        console.log(data.message);
                        fetchCategories();
                        closeDialog();
                    })
                }

                // deletes the category from the backend
                function deleteCategory(category, e) {
                    e.preventDefault();
                    fetch("/deleteCategory", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ _id: category._id })
                    })
                    .then(res => res.json())
                    .then(data => {
                        console.log(data.message);
                        fetchCategories();
                        closeDialog();
                    })
                }

                // closes the dialog box
                function closeDialog() {
                    dialog.close();
                }

                // display categories and tasks when the page is loaded
                fetchCategories()
            </script>
        <% } %>


        <!-- All of the child rendering and logic -->
        <% if (role=="kid" ) { %>
            <!-- The template for the popup created when the kid clicks "Task Completed!" -->
            <template id="taskFinishPopup">
                <div class="modal flex">
                    <div class="modal-content p-5 max-h-screen">
                        <h2>Have you completed this task?</h2>
                        <div id="result"></div>
                        <div class="flex justify-between gap-2">
                            <button id="cancelButton" onclick="closeDialog()" class="role-btn"
                                type="cancel">No</button>
                            <button id="submitButton" class="role-btn" type="submit">Yes!</button>
                        </div>
                    </div>
                </div>
            </template>

            <script>
                const dialogKid = document.querySelector("dialog")

                // Creates a confirmation popup for kid after they ckick that they have completed their task
                function finishTaskPopup(task) {
                    dialogKid.showModal()
                    dialogResult.innerHTML = ""

                    taskTemplate = document.getElementById("taskFinishPopup")
                    dialogResult.appendChild(taskTemplate.content.cloneNode(true))

                    setTimeout(() => {
                        result = document.getElementById("result")

                        const taskResult = document.createElement("div")
                        taskResult.setAttribute('class', "bg-white bg-opacity-70 shadow rounded-2xl p-2")
                        result.appendChild(taskResult)

                        const topDiv = document.createElement("div")
                        topDiv.setAttribute('class', "grid grid-cols-2 md:grid-cols-3 rounded-2xl mb-2")
                        taskResult.appendChild(topDiv)

                        const taskTitle = document.createElement('span')
                        taskTitle.setAttribute('class', " flex rounded-2xl font-bold font-lg")
                        taskTitle.innerHTML = task.name
                        topDiv.appendChild(taskTitle)

                        if (task.filename) {
                            const logo = document.createElement('img')
                            logo.setAttribute('class', "flex rounded-full shadow size-20 mx-auto font-bold font-lg")
                            logo.src = "images/" + task.filename
                            topDiv.appendChild(logo)
                        } else {
                            const placeholder = document.createElement('div')
                            placeholder.setAttribute('class', "w-20 h-20 bg-gray-200 rounded-full flex mx-auto items-center justify-center font-bold text-2xl")
                            placeholder.innerHTML = '<span class="text-gray-400 text-xs">No icon</span>'
                            topDiv.appendChild(placeholder)
                        }

                        const taskPoints = document.createElement('span')
                        taskPoints.setAttribute('class', "rounded-2xl md:text-right")
                        taskPoints.innerHTML = '⭐' + task.points
                        topDiv.appendChild(taskPoints)

                        const taskDesc = document.createElement('p')
                        taskDesc.setAttribute('class', "rounded-2xl")
                        taskDesc.innerHTML = task.taskdetails
                        taskResult.appendChild(taskDesc)

                        const submitButton = document.getElementById("submitButton");
                        if (submitButton) submitButton.addEventListener("click", () => finishTask(task))
                    }, 0)
                }


                // Adds points to the kid's profile and marks them as having finished the task on the task itself
                // I refresh the page to update the render because calling fetchcategories again wasn't working for some reason
                function finishTask(task) {
                    fetch("/kidFinishTask", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ task: task })
                    })
                    .then((response) => response.json())
                    .then((data) => {
                        console.log(data.message);
                        // Update points display in header
                        const pointsDisplay = document.getElementById('pointsDisplay');
                        if (pointsDisplay && data.points !== undefined) {
                            pointsDisplay.textContent = `Points: ${data.points}`;
                        }
                        window.location.reload();
                    })
                }

                // fetches the kid's data to show how many points they have, then renders each category, then each task
                function fetchCategories() {
                    const result = document.getElementById("result")
                    result.innerHTML = ""
                    fetch("/user", { method: "GET" })
                    .then((userResponse) => userResponse.json())
                    .then((userData) => {
                        fetch("/kidCategories", { method: "GET" })
                        .then((response) => response.json())
                        .then((data) => {
                            data.forEach((category) => {
                                const div = document.createElement("div")
                                div.setAttribute('class', "grid bg-[" + category.color + "] rounded-2xl my-5 p-2 mx-5 max-w-4xl")
                                result.appendChild(div)

                                const titleAndEdit = document.createElement("div")
                                titleAndEdit.setAttribute("class", "flex justify-center items-center mb-3")
                                div.appendChild(titleAndEdit)

                                const title = document.createElement("span")
                                title.innerText = category.name
                                title.setAttribute("class", "text-2xl text-center font-bold bg-white bg-opacity-70 p-3 mb-2 rounded-2xl")
                                titleAndEdit.appendChild(title)

                                const totalResult = document.createElement("div")
                                totalResult.setAttribute('class', "grid grid-cols-2 gap-3 mb-3")
                                div.appendChild(totalResult)

                                // Fuctionality for filling out the tasks inside the category
                                // Encode the url just incase it has spaces (Other wise it will think you sent 2 different parameters)
                                const categoryNameDB = encodeURIComponent(category.name)
                                fetch(`/kidDisplayTasks?category=${categoryNameDB}`, {
                                    credentials: 'include',
                                    method: "GET",
                                })
                                .then((response) => response.json())
                                .then((data) => {
                                    data.forEach((task) => {
                                        const taskResult = document.createElement("div")
                                        taskResult.setAttribute('class', "bg-white bg-opacity-70 shadow rounded-2xl p-2")
                                        totalResult.appendChild(taskResult)

                                        const topDiv = document.createElement("div")
                                        topDiv.setAttribute('class', "grid grid-cols-2 md:grid-cols-3 rounded-2xl mb-2")
                                        taskResult.appendChild(topDiv)

                                        const taskTitle = document.createElement('span')
                                        taskTitle.setAttribute('class', " flex rounded-2xl font-bold font-lg")
                                        taskTitle.innerHTML = task.name
                                        topDiv.appendChild(taskTitle)

                                        if (task.filename) {
                                            const logo = document.createElement('img')
                                            logo.setAttribute('class', "flex rounded-full shadow size-20 mx-auto font-bold font-lg")
                                            logo.src = "images/" + task.filename
                                            topDiv.appendChild(logo)
                                        } else {
                                            const placeholder = document.createElement('div')
                                            placeholder.setAttribute('class', "w-20 h-20 bg-gray-200 rounded-full flex mx-auto items-center justify-center font-bold text-2xl")
                                            placeholder.innerHTML = '<span class="text-gray-400 text-xs">No icon</span>'
                                            topDiv.appendChild(placeholder)
                                        }

                                        const taskPoints = document.createElement('span')
                                        taskPoints.setAttribute('class', "rounded-2xl md:text-right")
                                        taskPoints.innerHTML = '⭐' + task.points
                                        topDiv.appendChild(taskPoints)

                                        const taskDesc = document.createElement('p')
                                        taskDesc.setAttribute('class', "rounded-2xl")
                                        taskDesc.innerHTML = task.taskdetails
                                        taskResult.appendChild(taskDesc)
                                        if (!(task.completedBy.includes(userData._id))) {
                                            const finishTaskBtn = document.createElement("button")
                                            finishTaskBtn.innerHTML = "Task Complete!"
                                            finishTaskBtn.setAttribute("class", "role-btn block mx-auto mt-3 px-5")
                                            finishTaskBtn.addEventListener("click", () => finishTaskPopup(task))
                                            taskResult.appendChild(finishTaskBtn)
                                        } else {
                                            const comeTomorrow = document.createElement("h2")
                                            let refreshMessage = "Task completed";
                                            if (task.isRepeating) {
                                                const nextRefresh = getNextRefreshTime(task.lastResetTime, task.repeatInterval);
                                                refreshMessage = `Task refreshes ${nextRefresh}`;
                                            }
                                            comeTomorrow.innerHTML = refreshMessage;
                                            comeTomorrow.setAttribute("class", "bg-[#b2e6b2] block mx-auto mt-3 px-5 py-3 text-center rounded-2xl")
                                            taskResult.appendChild(comeTomorrow)
                                        }
                                    })
                                })
                            })
                        })
                    })
                }

                // Helper function to calculate next refresh time
                function getNextRefreshTime(lastResetTime, interval) {
                    if (!lastResetTime || !interval) return "soon";

                    const last = new Date(lastResetTime);
                    const now = new Date();
                    let next;

                    switch (interval) {
                        case 'daily':
                            next = new Date(last.setDate(last.getDate() + 1));
                            break;
                        case 'weekly':
                            next = new Date(last.setDate(last.getDate() + 7));
                            break;
                        case 'monthly':
                            next = new Date(last.setMonth(last.getMonth() + 1));
                            break;
                        default:
                            return "soon";
                    }

                    // If the next refresh is in the past, it means it should refresh now
                    if (next < now) return "very soon";

                    // Calculate relative time
                    const diffHours = Math.round((next - now) / (1000 * 60 * 60));
                    if (diffHours < 24) return `in ${diffHours} hour${diffHours === 1 ? '' : 's'}`;
                    const diffDays = Math.round(diffHours / 24);
                    if (diffDays === 1) return "tomorrow";
                    if (diffDays < 7) return `in ${diffDays} day${diffDays === 1 ? '' : 's'}`;
                    if (diffDays < 30) {
                        const weeks = Math.round(diffDays / 7);
                        return `in ${weeks} week${weeks === 1 ? '' : 's'}`;
                    }
                    const months = Math.round(diffDays / 30);
                    return `in ${months} month${months === 1 ? '' : 's'}`;
                }

                // closes the dialog
                function closeDialog() {
                    dialogKid.close();
                }

                // Renders categories and tasks on loading the page
                fetchCategories()
            </script>
        <% } %>

        <!-- For testing purposes -->
        <% if (role==undefined ) { %>
            <p>Please log in</p>
        <% } %>

        <!-- Shows the weather -->
        <div id="weatherDiv"
            style="background: #f4ffe4; padding: 16px 20px; border-radius: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); font-family: Open Sans, sans-serif; z-index: 1000; width: 200px;"
            class="fixed max-md:relative md:bottom-10 md:right-10 max-md:mx-auto my-10">
            <h4
                style="margin-bottom: 8px; font: 600 1rem 'Open Sans', sans-serif; color: #2e8b3d;">
                Current Weather</h4>
            <p id="weather-temp" style="margin: 6px 0 2px 0; font-size: 1rem;"></p>
            <p id="weather-desc" style="margin: 0 0 8px 0; font-size: 0.9rem; color: #444;"></p>
            <img id="weather-icon" src="" alt="Weather Icon"
                style="width: 50px; display: none;">
        </div>

        <script>
            let latitude;
            let longitude;

            // Finds the location of the user
            function getLocation() {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(success, error);
                } else {
                    console.log("Geolocation is not supported by this browser.");
                }
            }

            function success(position) {
                latitude = position.coords.latitude
                longitude = position.coords.longitude
                console.log(longitude, latitude)
                getWeather(latitude, longitude);
            }

            function error() {
                alert("Sorry, no position available.");
            }

            function getWeather(latitude, longitude) {
                const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=55aacf4680def095e9090e51cee74084`;

                fetch(url)
                .then(response => response.json())
                .then(data => {
                    const temp = data.main.temp;
                    const description = data.weather[0].description;
                    const image = data.weather[0].icon;
                    weatherDiv.innerHTML = ` 
                            <p>${temp}°C</p>
                            <p>${description}</p>
                            <img src="http://openweathermap.org/img/w/${image}.png" alt="Weather Icon" />
                        `;
                    console.log(` Temperature: ${temp}°C`);
                    console.log(` Description: ${description}`);
                    console.log(`Icon URL: http://openweathermap.org/img/wn/${image}@2x.png`);
                })
                .catch(error => {
                    console.error("Error fetching weather:", error);
                });
            }


            window.onload = getLocation;
        </script>


    </div>
</body>

</html>