<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <br><br><br>

    <!-- Dialog box -->
    <dialog id="dialogBox">
        <div id="dialogResult"></div>
    </dialog>

    <% if (role == "parent" ) { %>
        <div id="result"></div>
        <button onclick="dialogMaker(createCategoryPopup)" class="bg-red-500">Create Category Button</button>

        <template id="categoryCreationTemplate">
            <div class="forms-container">
                <h1>Create a Category</h1>
                <form class="form active" action="/createCategory" method="POST">
                    <label for="name">Name:</label>
                    <input name="name" type="text" id="categoryName" class="input" placeholder="Category name..." required>
                    <label for="color">Background Color:</label>
                    <input name="color" type="color" id="categoryColor" class="border-2" value="#b2e6b2" required>
                    <div class="flex justify-between">
                        <button id="cancelButton" onclick="closeDialog()" class="role-btn">Cancel</button>
                        <button id="submitButton" class="role-btn" type="submit">Submit</button>
                    </div>
                </form>
            </div>
        </template>

        <template id="taskCreationPopup">
            <div class="forms-container">
                <p class="text-xl">Create a Task</p>
                <form class="form active" action="/createTask" method="POST">
                    <label for="name">Name of Task: </label>
                    <input name="name" type="text" id="taskName" class="input" placeholder="Input task name (EX. wash the dishes)" required>
                    <label for="taskdetails">Task Details: </label>
                    <input name="taskdetails" type="text" id="taskDetails" class="input" placeholder="Describe the task and the intructions">
                    <label for="points">Points awarded: </label>
                    <input name="points" type="number" id="pointsAwarded" class="input" required>
                    <div class="flex justify-between">
                        <button id="cancelButton" onclick="closeDialog()" class="role-btn w-24">Cancel</button>
                        <button id="submitButton" class="role-btn w-24" type="submit">Submit</button>
                    </div>
                </form>
            </div>
        </template>
    <% } %>
        
    <% if (role == "kid" ) { %>
        <p>this is testing kid rendering</p>
    <% } %>
        
    <% if (role == undefined ) { %>
        <p>Please log in</p>
    <% } %>

    <script>
        const dialog = document.querySelector("dialog")
        const dialogResult = document.getElementById("dialogResult")

        
        function dialogMaker(makes) {
            dialog.showModal()
            makes()
        }

        function displayTaskForm() {
            dialogResult.innerHTML = ""
            tasktemplate = document.getElementById("taskCreationPopup")
            dialogResult.appendChild(tasktemplate.content.cloneNode(true)) 

            setTimeout(() => {
                const submitButton = document.getElementById("submitButton");
                if (submitButton) submitButton.addEventListener("click", newTask)
            }, 0)
            alert('after setimeout')
        }

        // creates a category based on 
        function createCategoryPopup() {
            alert('this gets here cate')
            dialogResult.innerHTML = ""
            categoryTemplate = document.getElementById("categoryCreationTemplate")
            dialogResult.appendChild(categoryTemplate.content.cloneNode(true)) 

            setTimeout(() => {
                const submitButton = document.getElementById("submitButton");
                if (submitButton) submitButton.addEventListener("click", newCategory)
            }, 0)
        }

        function editCategoryPopup(name, color) {
            dialog.showModal()
            dialogResult.innerHTML = ""

            categoryTemplate = document.getElementById("categoryCreationTemplate")

            
            dialogResult.appendChild(categoryTemplate.content.cloneNode(true))
            
            setTimeout(() => {
                categoryName = document.getElementById("categoryName")
                categoryName.setAttribute("value", name)
    
                categoryColor = document.getElementById("categoryColor")
                categoryColor.setAttribute("value", color)
                
                const submitButton = document.getElementById("submitButton");
                if (submitButton) submitButton.addEventListener("click", newCategory)
            }, 0)
        }

        function fetchCategories() {
            fetch("/categories", { method: "GET" })
                .then((response) => response.json())
                .then((data) => {
                    const result = document.getElementById("result")
                    result.innerHTML = ""
                    counter = 0
                    data.forEach((category) => {
                        counter ++
                        const div = document.createElement("div")
                        div.setAttribute('class', "grid grid-rows-2 bg-[" + category.color + "] rounded-md my-2 p-2")
                        result.appendChild(div)
                        
                        const titleAndEdit = document.createElement("div")
                        titleAndEdit.setAttribute("class", "flex justify-between")
                        div.appendChild(titleAndEdit)
                        
                        const title = document.createElement("span")
                        title.innerText = category.name
                        titleAndEdit.appendChild(title)

                        const editBtn = document.createElement("button")
                        editBtn.innerHTML = "Edit category"
                        editBtn.addEventListener("click", () => editCategoryPopup(category.name, category.color))
                        titleAndEdit.appendChild(editBtn)

                        const taskResult = document.createElement("div")
                        taskResult.setAttribute("id", category.name + counter)
                        taskResult.innerHTML = "tasks go here"
                        div.appendChild(taskResult)
                        
                        const btn = document.createElement('button')
                        btn.addEventListener("click", () => dialogMaker(displayTaskForm))
                        btn.innerText = "Add Task"
                        // Fuctionality for task creation inside the category
                        btn.addEventListener("click", function () {
                            const taskName = 
                            fetch(`/createTask`, {
                                credentials: 'include'
                                })
                                .then((response) => response.json())
                                .then((data) => {
                                    
                                })
                            })
                        div.appendChild(btn)
                    })
                })
        }
        function newTask() {
            const name = document.getElementById('taskName').value
            const details = document.getElementById('taskDetails').value
            const points = document.getElementById('pointsAwarded').value

            fetch("/createTask", {
                method: "POST",
                headers: {"Content-Type": "application/json"}, 
                body: JSON.stringify({ name, details, points })
            })
            .then(res => res.json())
            .then(data => {
                closeDialog()
            })
            .catch(error => {console.log('Error creating tasks:', error)})

        }
        function newCategory(e) {
            e.preventDefault();
            const name = document.getElementById('categoryName').value
            const color = document.getElementById('categoryColor').value

            fetch("/createCategory", { 
                method: "POST", 
                headers: {"Content-Type": "application/json"}, 
                body: JSON.stringify({ name, color })
            })
            .then(res => res.json())
            .then(data => {
                console.log(data.message);
                fetchCategories();
                closeDialog();
            })
        .catch(err => {
            console.error("Error creating category:", err)
        })
        }

        function closeDialog() {
            dialog.close();
        }
        fetchCategories()
    </script>
</body>

</html>