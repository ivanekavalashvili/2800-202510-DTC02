<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
        <div class="reward-btn">
            <% if (role==="parent" ) { %>
                <a href="#" id="openAddRewardModal" class="nav-btn">Add Reward</a>
                <% } %>
        </div>
        <div id="AddRewardModal" class="modal" style="display: none;">
            <div class="modal-content">
                <span class="close-btn" id="closeAddRewardModal">&times;</span>
                <h2>Add a Reward</h2>
                <form id="addRewardForm">
                    <input class="input" type="text" name="rewardTitle" placeholder="Title" required
                        oninput="validateTextInput(this)">
                    <input class="input" type="text" name="description" placeholder="Description" required
                        oninput="validateTextInput(this)">
                    <input class="input" type="number" name="pointsNeeded" placeholder="Cost" min="1" step="1" required
                        oninput="validatePointsInput(this)" title="Points must be a positive whole number">
                    <button type="submit" class="login-btn">Create Reward</button>
                </form>
            </div>
        </div>
        <div id="editRewardModal" class="modal" style="display: none;">
            <div class="modal-content">
                <span class="close-btn" id="closeEditRewardModal">&times;</span>
                <h2>Edit Reward</h2>
                <form id="editRewardForm">
                    <input type="hidden" name="rewardId">
                    <input class="input" type="text" name="rewardTitle" placeholder="Title" required
                        oninput="validateTextInput(this)">
                    <input class="input" type="text" name="description" placeholder="Description" required
                        oninput="validateTextInput(this)">
                    <input class="input" type="number" name="pointsNeeded" placeholder="Cost" min="1" step="1" required
                        oninput="validatePointsInput(this)" title="Points must be a positive whole number">
                    <div style="display: flex; justify-content: space-between; gap: 10px;">
                        <button type="submit" class="nav-btn">Save Changes</button>
                        <button type="button" id="deleteRewardBtn" class="nav-btn">
                            Delete
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <div class="reward-header">
            <h3>Your Rewards</h3>
        </div>
        <% if (rewards.length===0) { %>
            <p>No rewards created yet.</p>
            <% } else { %>
                <div class="reward-list">
                    <% rewards.forEach(reward=> { %>
                        <div class="reward-card" data-id="<%= reward._id %>">
                            <div class="title">
                                <%= reward.rewardTitle %>
                            </div>
                            <div class="description">
                                <%= reward.description %>
                            </div>
                            <div class="points">
                                <%= reward.pointsNeeded %> pts
                            </div>
                            <% if (role==='parent' ) { %>
                                <button class="edit-reward-btn" data-id="<%= reward._id %>"
                                    data-title="<%= reward.rewardTitle %>" data-description="<%= reward.description %>"
                                    data-points="<%= reward.pointsNeeded %>">
                                    Edit
                                </button>
                                <% } else if (role==='kid' ) { %>
                                    <button class="claim-reward-btn" data-id="<%= reward._id %>"
                                        data-points="<%= reward.pointsNeeded %>" <%=user.points>= reward.pointsNeeded ?
                                        '' : 'disabled' %>>
                                        <%= user.points>= reward.pointsNeeded ? 'Claim Reward' : 'Not Enough Points' %>
                                    </button>
                                    <% } %>
                        </div>
                        <% }) %>
                </div>
                <% } %>


    </body>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const modal = document.getElementById("AddRewardModal");
            const openBtn = document.getElementById("openAddRewardModal");
            const closeBtn = document.getElementById("closeAddRewardModal");
            const form = document.getElementById("addRewardForm");
            const editModal = document.getElementById("editRewardModal");
            const closeEditBtn = document.getElementById("closeEditRewardModal");
            const editForm = document.getElementById("editRewardForm");
            const deleteBtn = document.getElementById("deleteRewardBtn");


            if (modal && openBtn && closeBtn) {
                openBtn.addEventListener("click", (e) => {
                    e.preventDefault();
                    modal.style.display = "flex";
                });

                closeBtn.addEventListener("click", () => {
                    modal.style.display = "none";
                });

                window.addEventListener("click", (event) => {
                    if (event.target === modal) {
                        modal.style.display = "none";
                    }
                });
            }

            document.querySelectorAll(".edit-reward-btn").forEach(button => {
                button.addEventListener("click", () => {

                    editForm.rewardId.value = button.dataset.id;
                    editForm.rewardTitle.value = button.dataset.title;
                    editForm.description.value = button.dataset.description;
                    editForm.pointsNeeded.value = button.dataset.points;


                    editModal.style.display = "flex";
                });
            });


            closeEditBtn.addEventListener("click", () => {
                editModal.style.display = "none";
            });

            deleteBtn.addEventListener("click", async () => {
                const rewardId = editForm.rewardId.value;

                if (!rewardId) return alert("No reward selected.");
                if (!confirm("Are you sure you want to delete this reward?")) return;

                const res = await fetch(`/rewards/${rewardId}`, {
                    method: "DELETE"
                });

                const data = await res.json();
                if (res.ok) {
                    alert("Reward deleted.");
                    editModal.style.display = "none";
                    location.reload();
                } else {
                    alert(data.message || "Error deleting reward.");
                }
            });


            if (form) {
                form.addEventListener("submit", async (e) => {
                    e.preventDefault();
                    const titleInput = form.rewardTitle;
                    const title = titleInput.value;
                    const descriptionInput = form.description;
                    const description = descriptionInput.value;
                    const costInput = form.pointsNeeded;
                    const cost = costInput.value;

                    let isValid = true;

                    if (!(/^[a-zA-Z0-9 .,!?()-]+$/).test(title)) {
                        validateTextInput(titleInput);
                        isValid = false;
                    }

                    if (!(/^[a-zA-Z0-9 .,!?()-]+$/).test(description)) {
                        validateTextInput(descriptionInput);
                        isValid = false;
                    }

                    if (cost <= 0 || !Number.isInteger(Number(cost))) {
                        validatePointsInput(costInput);
                        isValid = false;
                    }

                    if (!isValid) return; // stop if any validation fails

                    const res = await fetch("/rewards", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ title, description, cost }),
                    });

                    const data = await res.json();
                    if (res.ok) {
                        alert("Reward Created");
                        form.reset();
                        modal.style.display = "none";
                        location.reload();
                    } else {
                        alert(data.message);
                    }
                });
            }
            if (editForm) {
                editForm.addEventListener("submit", async (e) => {
                    e.preventDefault();

                    const rewardId = editForm.rewardId.value;
                    const titleInput = editForm.rewardTitle;
                    const title = titleInput.value;
                    const descriptionInput = editForm.description;
                    const description = descriptionInput.value;
                    const costInput = editForm.pointsNeeded;
                    const cost = costInput.value;

                    let isValid = true;

                    if (!(/^[a-zA-Z0-9 .,!?()-]+$/).test(title)) {
                        validateTextInput(titleInput);
                        isValid = false;
                    }

                    if (!(/^[a-zA-Z0-9 .,!?()-]+$/).test(description)) {
                        validateTextInput(descriptionInput);
                        isValid = false;
                    }

                    if (cost <= 0 || !Number.isInteger(Number(cost))) {
                        validatePointsInput(costInput);
                        isValid = false;
                    }

                    if (!isValid) return; // stop if any validation fails

                    const res = await fetch(`/rewards/${rewardId}`, {
                        method: "PUT",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ title, description, cost }),
                    });

                    const data = await res.json();
                    if (res.ok) {
                        alert("Reward updated!");
                        editForm.reset();
                        editModal.style.display = "none";
                        location.reload();
                    } else {
                        alert(data.message || "Failed to update reward.");
                    }
                });
            }

            // Add claim reward functionality for kids
            document.querySelectorAll(".claim-reward-btn").forEach(button => {
                button.addEventListener("click", async () => {
                    const rewardId = button.dataset.id;
                    const pointsCost = parseInt(button.dataset.points);

                    if (!confirm("Are you sure you want to claim this reward?")) return;

                    try {
                        const res = await fetch(`/rewards/${rewardId}/claim`, {
                            method: "POST",
                            headers: { "Content-Type": "application/json" }
                        });

                        const data = await res.json();
                        if (res.ok) {
                            // Update points display in header
                            const pointsDisplay = document.getElementById('pointsDisplay');
                            if (pointsDisplay && data.newPoints !== undefined) {
                                pointsDisplay.textContent = `Points: ${data.newPoints}`;
                            }
                            alert("Reward claimed successfully!");
                            location.reload();
                        } else {
                            alert(data.message || "Failed to claim reward.");
                        }
                    } catch (error) {
                        console.error("Error claiming reward:", error);
                        alert("Error claiming reward. Please try again.");
                    }
                });
            });

        });

        function validatePointsInput(input) {
            let value = Number(input.value);

            if (value <= 0 || !Number.isInteger(value)) {
                input.classList.add('border-red-500');
                input.setCustomValidity('Points must be a positive whole number');

                let tooltip = document.getElementById(`${input.name}-tooltip`);
                if (!tooltip) {
                    tooltip = document.createElement('div');
                    tooltip.id = `${input.name}-tooltip`;
                    tooltip.className = 'text-red-500 text-sm';
                    input.parentNode.insertBefore(tooltip, input.nextSibling);
                }
                tooltip.textContent = 'Points must be a positive whole number';
            } else {
                input.classList.remove('border-red-500');
                input.setCustomValidity('');

                const tooltip = document.getElementById(`${input.name}-tooltip`);
                if (tooltip) tooltip.remove();
            }
        }

        function validateTextInput(input) {
            const regex = /^[a-zA-Z0-9 .,!?()-]+$/;
            const value = input.value;

            if (!regex.test(value) && value.trim() !== '') {
                input.classList.add('border-red-500');
                input.setCustomValidity('Please only use alphanumeric characters, spaces, and basic punctuation');

                let tooltip = document.getElementById(`${input.name}-text-tooltip`);
                if (!tooltip) {
                    tooltip = document.createElement('div');
                    tooltip.id = `${input.name}-text-tooltip`;
                    tooltip.className = 'text-red-500 text-sm';
                    input.parentNode.insertBefore(tooltip, input.nextSibling);
                }
                tooltip.textContent = 'Please only use alphanumeric characters, spaces, and basic punctuation';
            } else {
                input.classList.remove('border-red-500');
                input.setCustomValidity('');

                const tooltip = document.getElementById(`${input.name}-text-tooltip`);
                if (tooltip) tooltip.remove();
            }
        }
    </script>
</body>

</html>