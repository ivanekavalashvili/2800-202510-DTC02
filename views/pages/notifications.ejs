<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Notifications</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css?family=Quicksand:700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/styles.css">
</head>

<div class="container mx-auto px-4 py-8 mt-20">
    <h2 class="text-2xl font-bold mb-6">Notifications</h2>
    <div id="notifications-container" class="space-y-4">
        <!-- Notifications will be dynamically loaded here -->
    </div>
</div>

<!-- Audit Modal -->
<div class="modal flex" id="auditModal" tabindex="-1" aria-labelledby="auditModalLabel" aria-hidden="true"
    style="display: none;">
    <div class="modal-content p-4" style="width: 480px; background: var(--color-surface);">
        <h2 class="text-lg mb-3 text-left">Audit Notification</h2>
        <div class="bg-white bg-opacity-70 shadow rounded-2xl p-3 mb-3">
            <div class="grid grid-cols-2 gap-2 mb-3">
                <div class="text-left">
                    <p class="text-sm text-gray-600 mb-1"><strong>Type:</strong> <span id="modalType"></span></p>
                    <p class="text-sm text-gray-600 mb-1"><strong>From:</strong> <span id="modalKidName"></span></p>
                    <p class="text-sm text-gray-600 mb-1"><strong>Points:</strong> <span id="modalPoints"></span></p>
                </div>
                <div class="text-left">
                    <p class="text-sm text-gray-600 mb-1"><strong>Status:</strong> <span id="modalStatus"></span></p>
                    <p class="text-sm text-gray-600 mb-1"><strong>Date:</strong> <span id="modalDate"></span></p>
                </div>
            </div>
            <div id="pointsModificationSection" class="mb-3" style="display: none;">
                <label for="modifiedPoints" class="block text-sm text-gray-600 mb-1 text-left">Modified Points</label>
                <input type="number" id="modifiedPoints" class="input w-full text-sm"
                    placeholder="Enter modified points">
            </div>
            <div class="mb-3">
                <label for="auditNotes" class="block text-sm text-gray-600 mb-1 text-left">Notes</label>
                <textarea id="auditNotes" class="input w-full text-sm" rows="2"
                    placeholder="Add any notes about this audit"></textarea>
            </div>
        </div>
        <div class="flex justify-between gap-2">
            <button type="button" class="role-btn px-10" onclick="closeAuditModal()">Cancel</button>
            <button type="button" class="role-btn px-10" id="rejectBtn" onclick="rejectNotification()">Reject</button>
            <button type="button" class="role-btn px-10" id="approveBtn"
                onclick="approveNotification()">Approve</button>
        </div>
    </div>
</div>

<script>
    let currentNotificationId = null;
    const auditModal = document.getElementById('auditModal');

    function closeAuditModal() {
        auditModal.style.display = 'none';
    }

    async function loadNotifications() {
        try {
            const response = await fetch('/notifications');
            const notifications = await response.json();
            const container = document.getElementById('notifications-container');
            container.innerHTML = '';

            if (notifications.length === 0) {
                container.innerHTML = '<p class="text-gray-500 text-center">No notifications found</p>';
                return;
            }

            notifications.forEach(notification => {
                const card = createNotificationCard(notification);
                container.appendChild(card);
            });
        } catch (error) {
            console.error('Error loading notifications:', error);
            const container = document.getElementById('notifications-container');
            container.innerHTML = '<p class="text-red-500 text-center">Error loading notifications</p>';
        }
    }

    function createNotificationCard(notification) {
        const card = document.createElement('div');
        card.className = `bg-[var(--color-surface)] rounded-2xl p-6 shadow-md hover:shadow-lg hover:-translate-y-0.5 transition-all duration-200 ${notification.isRead ? 'opacity-75' : ''}`;

        const statusClass = {
            'pending': 'bg-yellow-100 text-yellow-800',
            'approved': 'bg-green-100 text-green-800',
            'rejected': 'bg-red-100 text-red-800'
        }[notification.status] || 'bg-gray-100 text-gray-800';

        const isReward = notification.taskOrReward === 'reward';
        const title = isReward ? 'Reward Claimed' : 'Task Completed';

        card.innerHTML = `
        <div class="flex justify-between items-center mb-4">
            <div class="flex items-center gap-3">
                <h5 class="text-xl font-semibold text-[var(--color-primary)]">${title}</h5>
                <span class="px-3 py-1 rounded-full text-sm ${statusClass}">${notification.status}</span>
            </div>
            <small class="text-gray-500 ml-4">${new Date(notification.createdAt).toLocaleString()}</small>
        </div>
        ${isReward ? `
            <p class="text-gray-700 mb-3">Reward: ${notification.rewardDetails?.title || 'Unknown Reward'}</p>
            <p class="text-gray-600 mb-3">${notification.rewardDetails?.description || ''}</p>
        ` : ''}
        <p class="text-gray-700 mb-3">Points: ${notification.points}</p>
        ${notification.auditNotes ? `<p class="text-gray-600 mb-3">Notes: ${notification.auditNotes}</p>` : ''}
        <div class="flex gap-3">
            ${notification.status === 'pending' ? `
                <button class="role-btn px-10" onclick="showAuditModal('${notification._id}')">
                    Audit
                </button>
            ` : ''}
            <button class="role-btn px-10" onclick="deleteNotification('${notification._id}')">
                Clear
            </button>
        </div>
    `;
        return card;
    }

    async function showAuditModal(notificationId) {
        try {
            currentNotificationId = notificationId;
            const response = await fetch(`/notifications/${notificationId}`);
            if (!response.ok) throw new Error('Failed to load notification details');

            const notification = await response.json();
            const isTask = notification.taskOrReward === 'task';

            // Update modal content
            document.getElementById('modalType').textContent = isTask ? 'Task Completed' : 'Reward Claimed';
            document.getElementById('modalKidName').textContent = notification.kidName;
            document.getElementById('modalPoints').textContent = notification.points;
            document.getElementById('modalStatus').textContent = notification.status;
            document.getElementById('modalDate').textContent = new Date(notification.createdAt).toLocaleString();

            // Add reward details if it's a reward claim
            const rewardDetailsHtml = isTask ? '' : `
            <p class="text-gray-600 mb-1"><strong>Reward:</strong> ${notification.rewardDetails?.title || 'Unknown Reward'}</p>
            <p class="text-gray-600 mb-1"><strong>Description:</strong> ${notification.rewardDetails?.description || ''}</p>
        `;
            document.getElementById('modalType').insertAdjacentHTML('afterend', rewardDetailsHtml);

            // Show/hide points modification section based on notification type
            const pointsSection = document.getElementById('pointsModificationSection');
            pointsSection.style.display = isTask ? 'block' : 'none';

            // Update form fields
            if (isTask) {
                document.getElementById('modifiedPoints').value = notification.points;
            }
            document.getElementById('auditNotes').value = notification.auditNotes || '';

            // Show/hide buttons based on status
            const approveBtn = document.getElementById('approveBtn');
            const rejectBtn = document.getElementById('rejectBtn');
            if (notification.status === 'pending') {
                approveBtn.style.display = 'inline-block';
                rejectBtn.style.display = 'inline-block';
            } else {
                approveBtn.style.display = 'none';
                rejectBtn.style.display = 'none';
            }

            auditModal.style.display = 'flex';
        } catch (error) {
            console.error('Error:', error);
            alert('Error loading notification details');
        }
    }

    async function approveNotification() {
        if (!currentNotificationId) {
            alert('No notification selected');
            return;
        }
        await updateNotificationStatus('approved');
    }

    async function rejectNotification() {
        if (!currentNotificationId) {
            alert('No notification selected');
            return;
        }
        await updateNotificationStatus('rejected');
    }

    async function updateNotificationStatus(status) {
        if (!currentNotificationId) {
            alert('No notification selected');
            return;
        }

        const notification = await (await fetch(`/notifications/${currentNotificationId}`)).json();
        const isTask = notification.taskOrReward === 'task';

        const modifiedPoints = isTask ? document.getElementById('modifiedPoints').value : notification.points;
        const auditNotes = document.getElementById('auditNotes').value;

        try {
            const response = await fetch(`/notifications/${currentNotificationId}/audit`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    status,
                    modifiedPoints: parseInt(modifiedPoints),
                    auditNotes
                })
            });

            if (response.ok) {
                closeAuditModal();
                loadNotifications();
            } else {
                const error = await response.json();
                alert(error.message || 'Error updating notification status');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error updating notification status');
        }
    }

    async function deleteNotification(notificationId) {
        if (!confirm('Are you sure you want to delete this notification?')) {
            return;
        }

        try {
            const response = await fetch(`/notifications/${notificationId}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                loadNotifications();
            } else {
                alert('Error deleting notification');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error deleting notification');
        }
    }

    // Load notifications when the page loads
    document.addEventListener('DOMContentLoaded', loadNotifications);
</script>
</body>

</html>