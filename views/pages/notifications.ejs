<%- include('../partials/header') %>

    <div class="container mx-auto px-4 py-8 mt-20">
        <h2 class="text-2xl font-bold mb-6">Notifications</h2>
        <div id="notifications-container" class="space-y-4">
            <!-- Notifications will be dynamically loaded here -->
        </div>
    </div>

    <!-- Audit Modal -->
    <div class="modal fade" id="auditModal" tabindex="-1" aria-labelledby="auditModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="auditModalLabel">Audit Notification</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-4">
                        <h5 class="text-lg font-semibold mb-2">Notification Details</h5>
                        <p class="text-gray-600 mb-1"><strong>Type:</strong> <span id="modalType"></span></p>
                        <p class="text-gray-600 mb-1"><strong>From:</strong> <span id="modalKidName"></span></p>
                        <p class="text-gray-600 mb-1"><strong>Points:</strong> <span id="modalPoints"></span></p>
                        <p class="text-gray-600 mb-1"><strong>Status:</strong> <span id="modalStatus"></span></p>
                        <p class="text-gray-600 mb-1"><strong>Date:</strong> <span id="modalDate"></span></p>
                    </div>
                    <div id="pointsModificationSection" class="mb-3" style="display: none;">
                        <label for="modifiedPoints" class="form-label">Modified Points</label>
                        <input type="number" class="form-control" id="modifiedPoints">
                    </div>
                    <div class="mb-3">
                        <label for="auditNotes" class="form-label">Notes</label>
                        <textarea class="form-control" id="auditNotes" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="rejectBtn"
                        onclick="rejectNotification()">Reject</button>
                    <button type="button" class="btn btn-success" id="approveBtn"
                        onclick="approveNotification()">Approve</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        let currentNotificationId = null;
        const auditModal = new bootstrap.Modal(document.getElementById('auditModal'));

        async function loadNotifications() {
            try {
                const response = await fetch('/notifications');
                const notifications = await response.json();
                const container = document.getElementById('notifications-container');
                container.innerHTML = '';

                if (notifications.length === 0) {
                    container.innerHTML = '<p class="text-gray-500 text-center">No notifications found</p>';
                    return;
                }

                notifications.forEach(notification => {
                    const card = createNotificationCard(notification);
                    container.appendChild(card);
                });
            } catch (error) {
                console.error('Error loading notifications:', error);
                const container = document.getElementById('notifications-container');
                container.innerHTML = '<p class="text-red-500 text-center">Error loading notifications</p>';
            }
        }

        function createNotificationCard(notification) {
            const card = document.createElement('div');
            card.className = `bg-white rounded-lg shadow p-4 ${notification.isRead ? 'opacity-75' : ''}`;

            const statusClass = {
                'pending': 'bg-yellow-100 text-yellow-800',
                'approved': 'bg-green-100 text-green-800',
                'rejected': 'bg-red-100 text-red-800'
            }[notification.status] || 'bg-gray-100 text-gray-800';

            const isReward = notification.taskOrReward === 'reward';
            const title = isReward ? 'Reward Claimed' : 'Task Completed';

            card.innerHTML = `
            <div class="flex justify-between items-center mb-2">
                <div class="flex items-center gap-3">
                    <h5 class="text-lg font-semibold">${title}</h5>
                    <span class="px-2 py-1 rounded-full text-sm ${statusClass}">${notification.status}</span>
                </div>
                <small class="text-gray-500 ml-4">${new Date(notification.createdAt).toLocaleString()}</small>
            </div>
            ${isReward ? `
                <p class="text-gray-700 mb-2">Reward: ${notification.rewardDetails?.title || 'Unknown Reward'}</p>
                <p class="text-gray-600 mb-2">${notification.rewardDetails?.description || ''}</p>
            ` : ''}
            <p class="text-gray-700 mb-2">Points: ${notification.points}</p>
            ${notification.auditNotes ? `<p class="text-gray-600 mb-2">Notes: ${notification.auditNotes}</p>` : ''}
            <div class="flex gap-2">
                ${notification.status === 'pending' ? `
                    <button class="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600" onclick="showAuditModal('${notification._id}')">
                        Audit
                    </button>
                ` : ''}
                <button class="px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600" onclick="deleteNotification('${notification._id}')">
                    Clear
                </button>
            </div>
        `;
            return card;
        }

        async function showAuditModal(notificationId) {
            try {
                currentNotificationId = notificationId;
                const response = await fetch(`/notifications/${notificationId}`);
                if (!response.ok) throw new Error('Failed to load notification details');

                const notification = await response.json();
                const isTask = notification.taskOrReward === 'task';

                // Update modal content
                document.getElementById('modalType').textContent = isTask ? 'Task Completed' : 'Reward Claimed';
                document.getElementById('modalKidName').textContent = notification.kidName;
                document.getElementById('modalPoints').textContent = notification.points;
                document.getElementById('modalStatus').textContent = notification.status;
                document.getElementById('modalDate').textContent = new Date(notification.createdAt).toLocaleString();

                // Add reward details if it's a reward claim
                const rewardDetailsHtml = isTask ? '' : `
                    <p class="text-gray-600 mb-1"><strong>Reward:</strong> ${notification.rewardDetails?.title || 'Unknown Reward'}</p>
                    <p class="text-gray-600 mb-1"><strong>Description:</strong> ${notification.rewardDetails?.description || ''}</p>
                `;
                document.getElementById('modalType').insertAdjacentHTML('afterend', rewardDetailsHtml);

                // Show/hide points modification section based on notification type
                const pointsSection = document.getElementById('pointsModificationSection');
                pointsSection.style.display = isTask ? 'block' : 'none';

                // Update form fields
                if (isTask) {
                    document.getElementById('modifiedPoints').value = notification.points;
                }
                document.getElementById('auditNotes').value = notification.auditNotes || '';

                // Show/hide buttons based on status
                const approveBtn = document.getElementById('approveBtn');
                const rejectBtn = document.getElementById('rejectBtn');
                if (notification.status === 'pending') {
                    approveBtn.style.display = 'inline-block';
                    rejectBtn.style.display = 'inline-block';
                } else {
                    approveBtn.style.display = 'none';
                    rejectBtn.style.display = 'none';
                }

                auditModal.show();
            } catch (error) {
                console.error('Error:', error);
                alert('Error loading notification details');
            }
        }

        async function approveNotification() {
            if (!currentNotificationId) {
                alert('No notification selected');
                return;
            }
            await updateNotificationStatus('approved');
        }

        async function rejectNotification() {
            if (!currentNotificationId) {
                alert('No notification selected');
                return;
            }
            await updateNotificationStatus('rejected');
        }

        async function updateNotificationStatus(status) {
            if (!currentNotificationId) {
                alert('No notification selected');
                return;
            }

            const notification = await (await fetch(`/notifications/${currentNotificationId}`)).json();
            const isTask = notification.taskOrReward === 'task';

            const modifiedPoints = isTask ? document.getElementById('modifiedPoints').value : notification.points;
            const auditNotes = document.getElementById('auditNotes').value;

            try {
                const response = await fetch(`/notifications/${currentNotificationId}/audit`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        status,
                        modifiedPoints: parseInt(modifiedPoints),
                        auditNotes
                    })
                });

                if (response.ok) {
                    auditModal.hide();
                    loadNotifications();
                } else {
                    const error = await response.json();
                    alert(error.message || 'Error updating notification status');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error updating notification status');
            }
        }

        async function deleteNotification(notificationId) {
            if (!confirm('Are you sure you want to delete this notification?')) {
                return;
            }

            try {
                const response = await fetch(`/notifications/${notificationId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    loadNotifications();
                } else {
                    alert('Error deleting notification');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error deleting notification');
            }
        }

        // Load notifications when the page loads
        document.addEventListener('DOMContentLoaded', loadNotifications);
    </script>

    <%- include('../partials/footer') %>